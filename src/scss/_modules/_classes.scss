// Construct declaration for each grid multiple for the given prop and side
@mixin construct-declarations($prop, $side, $make-halves) {
  @if $make-halves == true {
    @for $i from 1 to 41 {
      &#{$i}u {
        @if $side == 'y' {
          #{$prop}-top: ($i * $base) + ($base * 0.5) !important;
          #{$prop}-bottom: ($i * $base) + ($base * 0.5) !important;
        } @else if $side == 'x' {
          #{$prop}-right: ($i * $base) + ($base * 0.5) !important;
          #{$prop}-left: ($i * $base) + ($base * 0.5) !important;
        } @else {
          #{$prop}-#{$side}: ($i * $base) + ($base * 0.5) !important;
        }
      }
    }
  } @else {
    @for $i from 1 to 41 {
      &#{$i} {
        @if $side == 'y' {
          #{$prop}-top: $i * $base !important;
          #{$prop}-bottom: $i * $base !important;
        } @else if $side == 'x' {
          #{$prop}-right: $i * $base !important;
          #{$prop}-left: $i * $base !important;
        } @else {
          #{$prop}-#{$side}: $i * $base !important;
        }
      }
    }
  }
}

// construct all sides of the box model for a given breakpoint
@mixin construct-sides($break, $prop) {
  @each $side, $s in (top, t), (right, r), (bottom, b), (left, l), (x, x), (y, y) {
    &#{$s}-#{$break} {
      @include construct-declarations(#{$prop}, #{$side}, false);
    }
    &#{$s}-#{$break} {
      @include construct-declarations(#{$prop}, #{$side}, true);
    }
  } 
}

// For each spacing  property, construct all classes for the given breakpoint
@mixin construct-spacing-classes($break) {
  @each $prop, $p in (margin, m), (padding, p) {
    .#{$p} {
      @include construct-sides($break, #{$prop});
    }
  }
}

// Construct all complete classes for a given breakpoint
@mixin construct-classes-at-breakpoint($break) {
  @include construct-spacing-classes($break);

  .mauto-#{$break} {
    margin-right: auto !important;
    margin-left: auto !important;
  }
  .minitial-#{$break} {
    margin-right: initial !important;
    margin-left: initial !important;
  }
  // Display classes
  .hide-#{$break} {
    display: none;
  }
  .show-#{$break} {
    display: block;
  }
  .show-ib-#{$break} {
    display: inline-block;
  }
  .show-i-#{$break} {
    display: inline;
  }

  // Text align classes
  .tal-#{$break} {
    text-align: left;
  }
  .tar-#{$break} {
    text-align: right;
  }
  .tac-#{$break} {
    text-align: center;
  }
  .tai-#{$break} {
    text-align: inherit;
  }
}

// Breakpoints are based on Bootstrap 4

// Extra small devices (portrait phones, less than 576px)
// No media query since this is the default (mobile-first)
@include construct-classes-at-breakpoint(xs);
@include construct-type-classes-at-breakpoint(xs);

// Small devices (landscape phones, 576px and up)
@media (min-width: 576px) {
  @include construct-classes-at-breakpoint(sm);
  @include construct-type-classes-at-breakpoint(sm);
}

// Medium devices (tablets, 768px and up)
@media (min-width: 768px) {
  @include construct-classes-at-breakpoint(md);
  @include construct-type-classes-at-breakpoint(md);
}

// Large devices (desktops, 992px and up)
@media (min-width: 992px) {
  @include construct-classes-at-breakpoint(lg);
  @include construct-type-classes-at-breakpoint(lg);
}

// Extra large devices (large desktops, 1200px and up)
@media (min-width: 1200px) {
  @include construct-classes-at-breakpoint(xl);
  @include construct-type-classes-at-breakpoint(xl);
}